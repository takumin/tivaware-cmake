#include <stdint.h>
#include "inc/hw_nvic.h"
#include "inc/hw_types.h"

//*****************************************************************************
//
// Forward declaration of the default fault handlers.
//
//*****************************************************************************
void Reset_Handler(void);

//*****************************************************************************
//
// The entry point for the application.
//
//*****************************************************************************
extern int main(void);

//*****************************************************************************
//
// The following are constructs created by the linker, indicating where the
// the "data" and "bss" segments reside in memory.  The initializers for the
// for the "data" segment resides immediately following the "text" segment.
//
//*****************************************************************************
extern uint32_t _ldata;
extern uint32_t _sdata;
extern uint32_t _edata;
extern uint32_t _sbss;
extern uint32_t _ebss;

//*****************************************************************************
//
// This is the code that gets called when the processor first starts execution
// following a reset event.  Only the absolutely necessary set is performed,
// after which the application supplied entry() routine is called.  Any fancy
// actions (such as making decisions based on the reset cause register, and
// resetting the bits in that register) are left solely in the hands of the
// application.
//
//*****************************************************************************
void Reset_Handler(void) {
  uint32_t *pui32Src, *pui32Dest;

  //
  // Copy the data segment initializers from flash to SRAM.
  //
  pui32Src = &_ldata;
  for (pui32Dest = &_sdata; pui32Dest < &_edata;) {
    *pui32Dest++ = *pui32Src++;
  }

  //
  // Zero fill the bss segment.
  //
  __asm(
      "  ldr     r0, =_sbss\n"
      "  ldr     r1, =_ebss\n"
      "  mov     r2, #0\n"
      "  .thumb_func\n"
      "zero_loop:\n"
      "  cmp     r0, r1\n"
      "  it      lt\n"
      "  strlt   r2, [r0], #4\n"
      "  blt     zero_loop");

  //
  // Call the application's entry point.
  //
  main();
}
